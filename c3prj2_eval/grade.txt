Grading at Wed Jul 17 06:04:02 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==331== Memcheck, a memory error detector
==331== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==331== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==331== Command: ./test-eval inp.2.txt
==331== Parent PID: 330
==331== 
==331== Invalid read of size 8
==331==    at 0x40145F: card_ptr_comp (eval.c:11)
==331==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==331==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==331==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==331==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==331==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==331==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==331==    by 0x4E7369E: qsort_r (msort.c:297)
==331==    by 0x401B86: compare_hands (eval.c:164)
==331==    by 0x402AFB: main (test-eval.c:124)
==331==  Address 0x5207518 is 0 bytes after a block of size 40 alloc'd
==331==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==331==    by 0x401017: add_card_to (deck-c4.c:29)
==331==    by 0x403216: hand_from_string (input.c:49)
==331==    by 0x402AE4: main (test-eval.c:123)
==331== 
==331== Invalid read of size 4
==331==    at 0x401462: card_ptr_comp (eval.c:11)
==331==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==331==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==331==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==331==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==331==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==331==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==331==    by 0x4E7369E: qsort_r (msort.c:297)
==331==    by 0x401B86: compare_hands (eval.c:164)
==331==    by 0x402AFB: main (test-eval.c:124)
==331==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==331== 
==331== 
==331== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==331==  Access not within mapped region at address 0x0
==331==    at 0x401462: card_ptr_comp (eval.c:11)
==331==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==331==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==331==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==331==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==331==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==331==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==331==    by 0x4E7369E: qsort_r (msort.c:297)
==331==    by 0x401B86: compare_hands (eval.c:164)
==331==    by 0x402AFB: main (test-eval.c:124)
==331==  If you believe this happened as a result of a stack
==331==  overflow in your program's main thread (unlikely but
==331==  possible), you can try to increase the size of the
==331==  main thread stack using the --main-stacksize= flag.
==331==  The main thread stack size used in this run was 8388608.
==331== 
==331== HEAP SUMMARY:
==331==     in use at exit: 880 bytes in 17 blocks
==331==   total heap usage: 56 allocs, 39 frees, 9,768 bytes allocated
==331== 
==331== LEAK SUMMARY:
==331==    definitely lost: 0 bytes in 0 blocks
==331==    indirectly lost: 0 bytes in 0 blocks
==331==      possibly lost: 0 bytes in 0 blocks
==331==    still reachable: 880 bytes in 17 blocks
==331==         suppressed: 0 bytes in 0 blocks
==331== Rerun with --leak-check=full to see details of leaked memory
==331== 
==331== For counts of detected and suppressed errors, rerun with: -v
==331== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 4: Trying hands with 3 of a kind
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 5: Trying hands with straights
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==384== Memcheck, a memory error detector
==384== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==384== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==384== Command: ./test-eval inp.7.txt
==384== Parent PID: 383
==384== 
==384== Invalid read of size 8
==384==    at 0x40145F: card_ptr_comp (eval.c:11)
==384==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==384==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==384==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==384==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==384==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==384==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==384==    by 0x4E7369E: qsort_r (msort.c:297)
==384==    by 0x401B86: compare_hands (eval.c:164)
==384==    by 0x402AFB: main (test-eval.c:124)
==384==  Address 0x520e940 is 0 bytes after a block of size 48 alloc'd
==384==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==384==    by 0x401017: add_card_to (deck-c4.c:29)
==384==    by 0x403216: hand_from_string (input.c:49)
==384==    by 0x402AE4: main (test-eval.c:123)
==384== 
==384== Invalid read of size 4
==384==    at 0x401462: card_ptr_comp (eval.c:11)
==384==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==384==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==384==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==384==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==384==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==384==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==384==    by 0x4E7369E: qsort_r (msort.c:297)
==384==    by 0x401B86: compare_hands (eval.c:164)
==384==    by 0x402AFB: main (test-eval.c:124)
==384==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==384== 
==384== 
==384== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==384==  Access not within mapped region at address 0x0
==384==    at 0x401462: card_ptr_comp (eval.c:11)
==384==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==384==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==384==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==384==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==384==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==384==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==384==    by 0x4E7369E: qsort_r (msort.c:297)
==384==    by 0x401B86: compare_hands (eval.c:164)
==384==    by 0x402AFB: main (test-eval.c:124)
==384==  If you believe this happened as a result of a stack
==384==  overflow in your program's main thread (unlikely but
==384==  possible), you can try to increase the size of the
==384==  main thread stack using the --main-stacksize= flag.
==384==  The main thread stack size used in this run was 8388608.
==384== 
==384== HEAP SUMMARY:
==384==     in use at exit: 912 bytes in 19 blocks
==384==   total heap usage: 386 allocs, 367 frees, 16,504 bytes allocated
==384== 
==384== LEAK SUMMARY:
==384==    definitely lost: 0 bytes in 0 blocks
==384==    indirectly lost: 0 bytes in 0 blocks
==384==      possibly lost: 0 bytes in 0 blocks
==384==    still reachable: 912 bytes in 19 blocks
==384==         suppressed: 0 bytes in 0 blocks
==384== Rerun with --leak-check=full to see details of leaked memory
==384== 
==384== For counts of detected and suppressed errors, rerun with: -v
==384== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 9: Trying hands with straight flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==413== Memcheck, a memory error detector
==413== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==413== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==413== Command: ./test-eval inp.10.txt
==413== Parent PID: 412
==413== 
==413== Invalid read of size 8
==413==    at 0x40145F: card_ptr_comp (eval.c:11)
==413==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==413==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==413==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==413==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==413==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==413==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==413==    by 0x4E7369E: qsort_r (msort.c:297)
==413==    by 0x401B86: compare_hands (eval.c:164)
==413==    by 0x402AFB: main (test-eval.c:124)
==413==  Address 0x520b2b8 is 0 bytes after a block of size 40 alloc'd
==413==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==413==    by 0x401017: add_card_to (deck-c4.c:29)
==413==    by 0x403216: hand_from_string (input.c:49)
==413==    by 0x402AE4: main (test-eval.c:123)
==413== 
==413== Invalid read of size 4
==413==    at 0x401462: card_ptr_comp (eval.c:11)
==413==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==413==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==413==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==413==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==413==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==413==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==413==    by 0x4E7369E: qsort_r (msort.c:297)
==413==    by 0x401B86: compare_hands (eval.c:164)
==413==    by 0x402AFB: main (test-eval.c:124)
==413==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==413== 
==413== 
==413== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==413==  Access not within mapped region at address 0x0
==413==    at 0x401462: card_ptr_comp (eval.c:11)
==413==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==413==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==413==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==413==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==413==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==413==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==413==    by 0x4E7369E: qsort_r (msort.c:297)
==413==    by 0x401B86: compare_hands (eval.c:164)
==413==    by 0x402AFB: main (test-eval.c:124)
==413==  If you believe this happened as a result of a stack
==413==  overflow in your program's main thread (unlikely but
==413==  possible), you can try to increase the size of the
==413==  main thread stack using the --main-stacksize= flag.
==413==  The main thread stack size used in this run was 8388608.
==413== 
==413== HEAP SUMMARY:
==413==     in use at exit: 880 bytes in 17 blocks
==413==   total heap usage: 234 allocs, 217 frees, 13,124 bytes allocated
==413== 
==413== LEAK SUMMARY:
==413==    definitely lost: 0 bytes in 0 blocks
==413==    indirectly lost: 0 bytes in 0 blocks
==413==      possibly lost: 0 bytes in 0 blocks
==413==    still reachable: 880 bytes in 17 blocks
==413==         suppressed: 0 bytes in 0 blocks
==413== Rerun with --leak-check=full to see details of leaked memory
==413== 
==413== For counts of detected and suppressed errors, rerun with: -v
==413== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: C
