Grading at Wed Jul 17 07:01:54 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==1755== Memcheck, a memory error detector
==1755== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1755== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1755== Command: ./test-eval inp.2.txt
==1755== Parent PID: 1754
==1755== 
==1755== Invalid read of size 8
==1755==    at 0x40146F: card_ptr_comp (eval.c:14)
==1755==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1755==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1755==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1755==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1755==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1755==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1755==    by 0x4E7369E: qsort_r (msort.c:297)
==1755==    by 0x401B9A: compare_hands (eval.c:172)
==1755==    by 0x402B0F: main (test-eval.c:124)
==1755==  Address 0x5207518 is 0 bytes after a block of size 40 alloc'd
==1755==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1755==    by 0x401017: add_card_to (deck-c4.c:29)
==1755==    by 0x40322A: hand_from_string (input.c:49)
==1755==    by 0x402AF8: main (test-eval.c:123)
==1755== 
==1755== Invalid read of size 4
==1755==    at 0x401472: card_ptr_comp (eval.c:14)
==1755==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1755==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1755==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1755==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1755==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1755==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1755==    by 0x4E7369E: qsort_r (msort.c:297)
==1755==    by 0x401B9A: compare_hands (eval.c:172)
==1755==    by 0x402B0F: main (test-eval.c:124)
==1755==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1755== 
==1755== 
==1755== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1755==  Access not within mapped region at address 0x0
==1755==    at 0x401472: card_ptr_comp (eval.c:14)
==1755==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1755==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1755==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1755==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1755==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1755==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1755==    by 0x4E7369E: qsort_r (msort.c:297)
==1755==    by 0x401B9A: compare_hands (eval.c:172)
==1755==    by 0x402B0F: main (test-eval.c:124)
==1755==  If you believe this happened as a result of a stack
==1755==  overflow in your program's main thread (unlikely but
==1755==  possible), you can try to increase the size of the
==1755==  main thread stack using the --main-stacksize= flag.
==1755==  The main thread stack size used in this run was 8388608.
==1755== 
==1755== HEAP SUMMARY:
==1755==     in use at exit: 880 bytes in 17 blocks
==1755==   total heap usage: 56 allocs, 39 frees, 9,768 bytes allocated
==1755== 
==1755== LEAK SUMMARY:
==1755==    definitely lost: 0 bytes in 0 blocks
==1755==    indirectly lost: 0 bytes in 0 blocks
==1755==      possibly lost: 0 bytes in 0 blocks
==1755==    still reachable: 880 bytes in 17 blocks
==1755==         suppressed: 0 bytes in 0 blocks
==1755== Rerun with --leak-check=full to see details of leaked memory
==1755== 
==1755== For counts of detected and suppressed errors, rerun with: -v
==1755== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 4: Trying hands with 3 of a kind
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 5: Trying hands with straights
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==1808== Memcheck, a memory error detector
==1808== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1808== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1808== Command: ./test-eval inp.7.txt
==1808== Parent PID: 1807
==1808== 
==1808== Invalid read of size 8
==1808==    at 0x40146F: card_ptr_comp (eval.c:14)
==1808==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1808==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1808==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1808==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1808==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1808==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1808==    by 0x4E7369E: qsort_r (msort.c:297)
==1808==    by 0x401B9A: compare_hands (eval.c:172)
==1808==    by 0x402B0F: main (test-eval.c:124)
==1808==  Address 0x520e940 is 0 bytes after a block of size 48 alloc'd
==1808==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1808==    by 0x401017: add_card_to (deck-c4.c:29)
==1808==    by 0x40322A: hand_from_string (input.c:49)
==1808==    by 0x402AF8: main (test-eval.c:123)
==1808== 
==1808== Invalid read of size 4
==1808==    at 0x401472: card_ptr_comp (eval.c:14)
==1808==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1808==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1808==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1808==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1808==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1808==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1808==    by 0x4E7369E: qsort_r (msort.c:297)
==1808==    by 0x401B9A: compare_hands (eval.c:172)
==1808==    by 0x402B0F: main (test-eval.c:124)
==1808==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1808== 
==1808== 
==1808== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1808==  Access not within mapped region at address 0x0
==1808==    at 0x401472: card_ptr_comp (eval.c:14)
==1808==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1808==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1808==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1808==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1808==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1808==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1808==    by 0x4E7369E: qsort_r (msort.c:297)
==1808==    by 0x401B9A: compare_hands (eval.c:172)
==1808==    by 0x402B0F: main (test-eval.c:124)
==1808==  If you believe this happened as a result of a stack
==1808==  overflow in your program's main thread (unlikely but
==1808==  possible), you can try to increase the size of the
==1808==  main thread stack using the --main-stacksize= flag.
==1808==  The main thread stack size used in this run was 8388608.
==1808== 
==1808== HEAP SUMMARY:
==1808==     in use at exit: 912 bytes in 19 blocks
==1808==   total heap usage: 386 allocs, 367 frees, 16,504 bytes allocated
==1808== 
==1808== LEAK SUMMARY:
==1808==    definitely lost: 0 bytes in 0 blocks
==1808==    indirectly lost: 0 bytes in 0 blocks
==1808==      possibly lost: 0 bytes in 0 blocks
==1808==    still reachable: 912 bytes in 19 blocks
==1808==         suppressed: 0 bytes in 0 blocks
==1808== Rerun with --leak-check=full to see details of leaked memory
==1808== 
==1808== For counts of detected and suppressed errors, rerun with: -v
==1808== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 9: Trying hands with straight flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==1837== Memcheck, a memory error detector
==1837== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1837== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1837== Command: ./test-eval inp.10.txt
==1837== Parent PID: 1836
==1837== 
==1837== Invalid read of size 8
==1837==    at 0x40146F: card_ptr_comp (eval.c:14)
==1837==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1837==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1837==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1837==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1837==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1837==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1837==    by 0x4E7369E: qsort_r (msort.c:297)
==1837==    by 0x401B9A: compare_hands (eval.c:172)
==1837==    by 0x402B0F: main (test-eval.c:124)
==1837==  Address 0x520b2b8 is 0 bytes after a block of size 40 alloc'd
==1837==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1837==    by 0x401017: add_card_to (deck-c4.c:29)
==1837==    by 0x40322A: hand_from_string (input.c:49)
==1837==    by 0x402AF8: main (test-eval.c:123)
==1837== 
==1837== Invalid read of size 4
==1837==    at 0x401472: card_ptr_comp (eval.c:14)
==1837==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1837==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1837==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1837==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1837==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1837==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1837==    by 0x4E7369E: qsort_r (msort.c:297)
==1837==    by 0x401B9A: compare_hands (eval.c:172)
==1837==    by 0x402B0F: main (test-eval.c:124)
==1837==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1837== 
==1837== 
==1837== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1837==  Access not within mapped region at address 0x0
==1837==    at 0x401472: card_ptr_comp (eval.c:14)
==1837==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1837==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1837==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1837==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1837==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1837==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1837==    by 0x4E7369E: qsort_r (msort.c:297)
==1837==    by 0x401B9A: compare_hands (eval.c:172)
==1837==    by 0x402B0F: main (test-eval.c:124)
==1837==  If you believe this happened as a result of a stack
==1837==  overflow in your program's main thread (unlikely but
==1837==  possible), you can try to increase the size of the
==1837==  main thread stack using the --main-stacksize= flag.
==1837==  The main thread stack size used in this run was 8388608.
==1837== 
==1837== HEAP SUMMARY:
==1837==     in use at exit: 880 bytes in 17 blocks
==1837==   total heap usage: 234 allocs, 217 frees, 13,124 bytes allocated
==1837== 
==1837== LEAK SUMMARY:
==1837==    definitely lost: 0 bytes in 0 blocks
==1837==    indirectly lost: 0 bytes in 0 blocks
==1837==      possibly lost: 0 bytes in 0 blocks
==1837==    still reachable: 880 bytes in 17 blocks
==1837==         suppressed: 0 bytes in 0 blocks
==1837== Rerun with --leak-check=full to see details of leaked memory
==1837== 
==1837== For counts of detected and suppressed errors, rerun with: -v
==1837== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: C
