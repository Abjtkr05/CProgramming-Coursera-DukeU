Grading at Wed Jul 17 07:05:57 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==2004== Memcheck, a memory error detector
==2004== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2004== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2004== Command: ./test-eval inp.2.txt
==2004== Parent PID: 2003
==2004== 
==2004== Invalid read of size 8
==2004==    at 0x40146F: card_ptr_comp (eval.c:14)
==2004==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==2004==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==2004==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==2004==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==2004==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==2004==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==2004==    by 0x4E7369E: qsort_r (msort.c:297)
==2004==    by 0x401B9A: compare_hands (eval.c:172)
==2004==    by 0x402B0F: main (test-eval.c:124)
==2004==  Address 0x5207518 is 0 bytes after a block of size 40 alloc'd
==2004==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2004==    by 0x401017: add_card_to (deck-c4.c:29)
==2004==    by 0x40322A: hand_from_string (input.c:49)
==2004==    by 0x402AF8: main (test-eval.c:123)
==2004== 
==2004== Invalid read of size 4
==2004==    at 0x401472: card_ptr_comp (eval.c:14)
==2004==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==2004==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==2004==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==2004==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==2004==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==2004==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==2004==    by 0x4E7369E: qsort_r (msort.c:297)
==2004==    by 0x401B9A: compare_hands (eval.c:172)
==2004==    by 0x402B0F: main (test-eval.c:124)
==2004==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==2004== 
==2004== 
==2004== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2004==  Access not within mapped region at address 0x0
==2004==    at 0x401472: card_ptr_comp (eval.c:14)
==2004==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==2004==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==2004==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==2004==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==2004==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==2004==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==2004==    by 0x4E7369E: qsort_r (msort.c:297)
==2004==    by 0x401B9A: compare_hands (eval.c:172)
==2004==    by 0x402B0F: main (test-eval.c:124)
==2004==  If you believe this happened as a result of a stack
==2004==  overflow in your program's main thread (unlikely but
==2004==  possible), you can try to increase the size of the
==2004==  main thread stack using the --main-stacksize= flag.
==2004==  The main thread stack size used in this run was 8388608.
==2004== 
==2004== HEAP SUMMARY:
==2004==     in use at exit: 880 bytes in 17 blocks
==2004==   total heap usage: 56 allocs, 39 frees, 9,768 bytes allocated
==2004== 
==2004== LEAK SUMMARY:
==2004==    definitely lost: 0 bytes in 0 blocks
==2004==    indirectly lost: 0 bytes in 0 blocks
==2004==      possibly lost: 0 bytes in 0 blocks
==2004==    still reachable: 880 bytes in 17 blocks
==2004==         suppressed: 0 bytes in 0 blocks
==2004== Rerun with --leak-check=full to see details of leaked memory
==2004== 
==2004== For counts of detected and suppressed errors, rerun with: -v
==2004== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 4: Trying hands with 3 of a kind
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 5: Trying hands with straights
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==2057== Memcheck, a memory error detector
==2057== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2057== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2057== Command: ./test-eval inp.7.txt
==2057== Parent PID: 2056
==2057== 
==2057== Invalid read of size 8
==2057==    at 0x40146F: card_ptr_comp (eval.c:14)
==2057==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==2057==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==2057==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==2057==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==2057==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==2057==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==2057==    by 0x4E7369E: qsort_r (msort.c:297)
==2057==    by 0x401B9A: compare_hands (eval.c:172)
==2057==    by 0x402B0F: main (test-eval.c:124)
==2057==  Address 0x520e940 is 0 bytes after a block of size 48 alloc'd
==2057==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2057==    by 0x401017: add_card_to (deck-c4.c:29)
==2057==    by 0x40322A: hand_from_string (input.c:49)
==2057==    by 0x402AF8: main (test-eval.c:123)
==2057== 
==2057== Invalid read of size 4
==2057==    at 0x401472: card_ptr_comp (eval.c:14)
==2057==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==2057==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==2057==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==2057==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==2057==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==2057==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==2057==    by 0x4E7369E: qsort_r (msort.c:297)
==2057==    by 0x401B9A: compare_hands (eval.c:172)
==2057==    by 0x402B0F: main (test-eval.c:124)
==2057==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==2057== 
==2057== 
==2057== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2057==  Access not within mapped region at address 0x0
==2057==    at 0x401472: card_ptr_comp (eval.c:14)
==2057==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==2057==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==2057==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==2057==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==2057==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==2057==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==2057==    by 0x4E7369E: qsort_r (msort.c:297)
==2057==    by 0x401B9A: compare_hands (eval.c:172)
==2057==    by 0x402B0F: main (test-eval.c:124)
==2057==  If you believe this happened as a result of a stack
==2057==  overflow in your program's main thread (unlikely but
==2057==  possible), you can try to increase the size of the
==2057==  main thread stack using the --main-stacksize= flag.
==2057==  The main thread stack size used in this run was 8388608.
==2057== 
==2057== HEAP SUMMARY:
==2057==     in use at exit: 912 bytes in 19 blocks
==2057==   total heap usage: 386 allocs, 367 frees, 16,504 bytes allocated
==2057== 
==2057== LEAK SUMMARY:
==2057==    definitely lost: 0 bytes in 0 blocks
==2057==    indirectly lost: 0 bytes in 0 blocks
==2057==      possibly lost: 0 bytes in 0 blocks
==2057==    still reachable: 912 bytes in 19 blocks
==2057==         suppressed: 0 bytes in 0 blocks
==2057== Rerun with --leak-check=full to see details of leaked memory
==2057== 
==2057== For counts of detected and suppressed errors, rerun with: -v
==2057== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 9: Trying hands with straight flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==2086== Memcheck, a memory error detector
==2086== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2086== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2086== Command: ./test-eval inp.10.txt
==2086== Parent PID: 2085
==2086== 
==2086== Invalid read of size 8
==2086==    at 0x40146F: card_ptr_comp (eval.c:14)
==2086==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==2086==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==2086==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==2086==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==2086==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==2086==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==2086==    by 0x4E7369E: qsort_r (msort.c:297)
==2086==    by 0x401B9A: compare_hands (eval.c:172)
==2086==    by 0x402B0F: main (test-eval.c:124)
==2086==  Address 0x520b2b8 is 0 bytes after a block of size 40 alloc'd
==2086==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2086==    by 0x401017: add_card_to (deck-c4.c:29)
==2086==    by 0x40322A: hand_from_string (input.c:49)
==2086==    by 0x402AF8: main (test-eval.c:123)
==2086== 
==2086== Invalid read of size 4
==2086==    at 0x401472: card_ptr_comp (eval.c:14)
==2086==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==2086==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==2086==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==2086==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==2086==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==2086==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==2086==    by 0x4E7369E: qsort_r (msort.c:297)
==2086==    by 0x401B9A: compare_hands (eval.c:172)
==2086==    by 0x402B0F: main (test-eval.c:124)
==2086==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==2086== 
==2086== 
==2086== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2086==  Access not within mapped region at address 0x0
==2086==    at 0x401472: card_ptr_comp (eval.c:14)
==2086==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==2086==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==2086==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==2086==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==2086==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==2086==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==2086==    by 0x4E7369E: qsort_r (msort.c:297)
==2086==    by 0x401B9A: compare_hands (eval.c:172)
==2086==    by 0x402B0F: main (test-eval.c:124)
==2086==  If you believe this happened as a result of a stack
==2086==  overflow in your program's main thread (unlikely but
==2086==  possible), you can try to increase the size of the
==2086==  main thread stack using the --main-stacksize= flag.
==2086==  The main thread stack size used in this run was 8388608.
==2086== 
==2086== HEAP SUMMARY:
==2086==     in use at exit: 880 bytes in 17 blocks
==2086==   total heap usage: 234 allocs, 217 frees, 13,124 bytes allocated
==2086== 
==2086== LEAK SUMMARY:
==2086==    definitely lost: 0 bytes in 0 blocks
==2086==    indirectly lost: 0 bytes in 0 blocks
==2086==      possibly lost: 0 bytes in 0 blocks
==2086==    still reachable: 880 bytes in 17 blocks
==2086==         suppressed: 0 bytes in 0 blocks
==2086== Rerun with --leak-check=full to see details of leaked memory
==2086== 
==2086== For counts of detected and suppressed errors, rerun with: -v
==2086== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: C
