Grading at Wed Jul 17 05:21:57 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==158== Memcheck, a memory error detector
==158== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==158== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==158== Command: ./test-eval inp.2.txt
==158== Parent PID: 157
==158== 
==158== Invalid read of size 8
==158==    at 0x40145F: card_ptr_comp (eval.c:10)
==158==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==158==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==158==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==158==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==158==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==158==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==158==    by 0x4E7369E: qsort_r (msort.c:297)
==158==    by 0x401B86: compare_hands (eval.c:163)
==158==    by 0x402AFB: main (test-eval.c:124)
==158==  Address 0x5207518 is 0 bytes after a block of size 40 alloc'd
==158==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==158==    by 0x401017: add_card_to (deck-c4.c:29)
==158==    by 0x403216: hand_from_string (input.c:49)
==158==    by 0x402AE4: main (test-eval.c:123)
==158== 
==158== Invalid read of size 4
==158==    at 0x401462: card_ptr_comp (eval.c:10)
==158==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==158==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==158==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==158==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==158==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==158==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==158==    by 0x4E7369E: qsort_r (msort.c:297)
==158==    by 0x401B86: compare_hands (eval.c:163)
==158==    by 0x402AFB: main (test-eval.c:124)
==158==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==158== 
==158== 
==158== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==158==  Access not within mapped region at address 0x0
==158==    at 0x401462: card_ptr_comp (eval.c:10)
==158==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==158==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==158==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==158==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==158==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==158==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==158==    by 0x4E7369E: qsort_r (msort.c:297)
==158==    by 0x401B86: compare_hands (eval.c:163)
==158==    by 0x402AFB: main (test-eval.c:124)
==158==  If you believe this happened as a result of a stack
==158==  overflow in your program's main thread (unlikely but
==158==  possible), you can try to increase the size of the
==158==  main thread stack using the --main-stacksize= flag.
==158==  The main thread stack size used in this run was 8388608.
==158== 
==158== HEAP SUMMARY:
==158==     in use at exit: 880 bytes in 17 blocks
==158==   total heap usage: 56 allocs, 39 frees, 9,768 bytes allocated
==158== 
==158== LEAK SUMMARY:
==158==    definitely lost: 0 bytes in 0 blocks
==158==    indirectly lost: 0 bytes in 0 blocks
==158==      possibly lost: 0 bytes in 0 blocks
==158==    still reachable: 880 bytes in 17 blocks
==158==         suppressed: 0 bytes in 0 blocks
==158== Rerun with --leak-check=full to see details of leaked memory
==158== 
==158== For counts of detected and suppressed errors, rerun with: -v
==158== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 4: Trying hands with 3 of a kind
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 5: Trying hands with straights
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==211== Memcheck, a memory error detector
==211== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==211== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==211== Command: ./test-eval inp.7.txt
==211== Parent PID: 210
==211== 
==211== Invalid read of size 8
==211==    at 0x40145F: card_ptr_comp (eval.c:10)
==211==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==211==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==211==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==211==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==211==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==211==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==211==    by 0x4E7369E: qsort_r (msort.c:297)
==211==    by 0x401B86: compare_hands (eval.c:163)
==211==    by 0x402AFB: main (test-eval.c:124)
==211==  Address 0x520e940 is 0 bytes after a block of size 48 alloc'd
==211==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==211==    by 0x401017: add_card_to (deck-c4.c:29)
==211==    by 0x403216: hand_from_string (input.c:49)
==211==    by 0x402AE4: main (test-eval.c:123)
==211== 
==211== Invalid read of size 4
==211==    at 0x401462: card_ptr_comp (eval.c:10)
==211==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==211==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==211==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==211==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==211==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==211==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==211==    by 0x4E7369E: qsort_r (msort.c:297)
==211==    by 0x401B86: compare_hands (eval.c:163)
==211==    by 0x402AFB: main (test-eval.c:124)
==211==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==211== 
==211== 
==211== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==211==  Access not within mapped region at address 0x0
==211==    at 0x401462: card_ptr_comp (eval.c:10)
==211==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==211==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==211==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==211==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==211==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==211==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==211==    by 0x4E7369E: qsort_r (msort.c:297)
==211==    by 0x401B86: compare_hands (eval.c:163)
==211==    by 0x402AFB: main (test-eval.c:124)
==211==  If you believe this happened as a result of a stack
==211==  overflow in your program's main thread (unlikely but
==211==  possible), you can try to increase the size of the
==211==  main thread stack using the --main-stacksize= flag.
==211==  The main thread stack size used in this run was 8388608.
==211== 
==211== HEAP SUMMARY:
==211==     in use at exit: 912 bytes in 19 blocks
==211==   total heap usage: 386 allocs, 367 frees, 16,504 bytes allocated
==211== 
==211== LEAK SUMMARY:
==211==    definitely lost: 0 bytes in 0 blocks
==211==    indirectly lost: 0 bytes in 0 blocks
==211==      possibly lost: 0 bytes in 0 blocks
==211==    still reachable: 912 bytes in 19 blocks
==211==         suppressed: 0 bytes in 0 blocks
==211== Rerun with --leak-check=full to see details of leaked memory
==211== 
==211== For counts of detected and suppressed errors, rerun with: -v
==211== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 9: Trying hands with straight flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==240== Memcheck, a memory error detector
==240== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==240== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==240== Command: ./test-eval inp.10.txt
==240== Parent PID: 239
==240== 
==240== Invalid read of size 8
==240==    at 0x40145F: card_ptr_comp (eval.c:10)
==240==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==240==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==240==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==240==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==240==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==240==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==240==    by 0x4E7369E: qsort_r (msort.c:297)
==240==    by 0x401B86: compare_hands (eval.c:163)
==240==    by 0x402AFB: main (test-eval.c:124)
==240==  Address 0x520b2b8 is 0 bytes after a block of size 40 alloc'd
==240==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==240==    by 0x401017: add_card_to (deck-c4.c:29)
==240==    by 0x403216: hand_from_string (input.c:49)
==240==    by 0x402AE4: main (test-eval.c:123)
==240== 
==240== Invalid read of size 4
==240==    at 0x401462: card_ptr_comp (eval.c:10)
==240==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==240==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==240==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==240==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==240==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==240==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==240==    by 0x4E7369E: qsort_r (msort.c:297)
==240==    by 0x401B86: compare_hands (eval.c:163)
==240==    by 0x402AFB: main (test-eval.c:124)
==240==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==240== 
==240== 
==240== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==240==  Access not within mapped region at address 0x0
==240==    at 0x401462: card_ptr_comp (eval.c:10)
==240==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==240==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==240==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==240==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==240==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==240==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==240==    by 0x4E7369E: qsort_r (msort.c:297)
==240==    by 0x401B86: compare_hands (eval.c:163)
==240==    by 0x402AFB: main (test-eval.c:124)
==240==  If you believe this happened as a result of a stack
==240==  overflow in your program's main thread (unlikely but
==240==  possible), you can try to increase the size of the
==240==  main thread stack using the --main-stacksize= flag.
==240==  The main thread stack size used in this run was 8388608.
==240== 
==240== HEAP SUMMARY:
==240==     in use at exit: 880 bytes in 17 blocks
==240==   total heap usage: 234 allocs, 217 frees, 13,124 bytes allocated
==240== 
==240== LEAK SUMMARY:
==240==    definitely lost: 0 bytes in 0 blocks
==240==    indirectly lost: 0 bytes in 0 blocks
==240==      possibly lost: 0 bytes in 0 blocks
==240==    still reachable: 880 bytes in 17 blocks
==240==         suppressed: 0 bytes in 0 blocks
==240== Rerun with --leak-check=full to see details of leaked memory
==240== 
==240== For counts of detected and suppressed errors, rerun with: -v
==240== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: C
